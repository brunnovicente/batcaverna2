<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Event\EventInterface;
use Cake\Mailer\Mailer;

/**
 * Users Controller
 *
 * @property \App\Model\Table\UsersTable $Users
 * @method \App\Model\Entity\User[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class UsersController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Auth->allow(['libera']);
    }

    public function isAuthorized($user)
    {
        if ($user['categoria'] == 'SUPREMO') {
            return true;
        } else {
            if (in_array($user['categoria'], ['COORDENADOR'])) {
                if (in_array($this->request->getParam('action'), ['alterarsenha','view','senha','login','logout','acesso'])) {
                    return true;
                }
            } else {
                if (in_array($this->request->getParam('action'), ['login','logout'])){
                    return true;
                }
            }
        }
        return false;
    }

    public function alterarsenha(){
        $user = $this->Auth->user();
        $user['professor'] = $this->getTableLocator()->get('Professores')
            ->find()
            ->contain(['Users'])
            ->where(['Professores.users_id'=>$user['id']])
            ->first();
        if($this->request->is('post')){
            $data = $this->request->getData();
            if($data['senha1'] == $data['senha2']){
                $usuario = $this->Users->get($this->Auth->user()['id']);
                $usuario->password = $data['senha1'];
                $this->Users->save($usuario);
                $this->Flash->success('Senha alterada com sucesso.');
                $this->redirect(['controller'=>'principal','action'=>'index']);
            }else{
                $this->Flash->error('Repita a mesma senha!');
            }
        }
        $this->set(compact('user'));

    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index()
    {
        $users = $this->paginate($this->Users);
        $this->set(compact('users'));
    }

    public function gerar()
    {
        $professores = $this->getTableLocator()->get('Professores')->find()->where(['users_id IS NULL'])->all();
        foreach ($professores as $professor) {
            $usuario = $this->Users->newEmptyEntity();
            $usuario->username = $professor->siape;
            $usuario->password = 'admin';
            $usuario->categoria = 'PROFESSOR';
            $usuario->status = 0;
            $this->Users->save($usuario);
            $professor->users_id = $usuario->id;
            $this->getTableLocator()->get('Professores')->save($professor);
        }
        $this->redirect(['controller'=>'principal', 'action'=>'index']);
    }

    public function revogar($id){
        $usuario = $this->Users->get($id);
        $usuario->status = 0;
        $usuario->categoria = 'PROFESSOR';
        $this->Users->save($usuario);
        $this->Flash->success('Acesso de COORDENADOR revogado com sucesso!');
        $this->redirect(['controller'=>'professores','action'=>'index']);
    }

    public function coordenar($id){
        $usuario = $this->Users->get($id);
        $usuario->status = 1;
        $usuario->categoria = 'COORDENADOR';
        $professor = $this->getTableLocator()->get('Professores')->find()->where(['users_id'=>$id])->first();

        $senha = rand(100000, 999999);
        $usuario->password = $senha."";
        $this->Users->save($usuario);
        $msg = new Mailer('default');
        $msg->setEmailFormat('html');
        $msg->setFrom(['brunovicente@brunovicente.tech'=>'BatCaverna'])
            ->setTo($professor->email)
            ->setSubject('Acesso Batcaverna')
            ->deliver('Bem Vindo à Batcaverna<br>'.
                'Você foi promovido à Coordenador de Curso. Sua senha temporária de acesso é <strong>'.$senha.'</strong>');

        $this->Flash->success('Acesso liberado com sucesso com a senha: '.$senha);
        $this->redirect(['controller'=>'professores','action'=>'index']);

    }

    public function acesso($id){
        $user = $this->Users->get($id);
        $senha = rand(100000, 999999);
        $user->password = $senha."";
        $user->status = 1;

        $this->Users->save($user);

        $professor = $this->getTableLocator()->get('Professores')->find()->where(['users_id'=>$id])->first();

        $msg = new Mailer('default');
        $msg->setEmailFormat('html');
        $msg->setFrom(['brunovicente@brunovicente.tech'=>'BatCaverna'])
            ->setTo($professor->email)
            ->setSubject('Acesso Batcaverna')
            ->deliver('Bem Vindo à Batcaverna<br>'.
                    'Sua senha de acesso é <strong>'.$senha.'</strong>');

        $this->Flash->success('Acesso liberado com sucesso com a senha: '.$senha);
        $this->redirect(['controller'=>'professores']);
    }//Fim do acesso

    public function libera(){
        $this->viewBuilder()->setLayout('login');
        if($this->request->is('post')){
            $dados = $this->request->getData();
            $usuario = $this->Users->find()->where(['username'=>$dados['siape']])->first();
            if($usuario){
                $professor = $this->getTableLocator()->get('Professores')->find()->where(['siape'=>$dados['siape']])->first();
                $senha = rand(100000,999999);
                $usuario->password = $senha.'';
                $usuario->status = 1;
                $this->Users->save($usuario);
                $msg = new Mailer('default');
                $msg->setEmailFormat('html');
                $msg->setFrom(['brunovicente@brunovicente.tech'=>'BatCaverna'])
                    ->setTo($professor->email)
                    ->setSubject('Acesso Batcaverna')
                    ->deliver('Bem Vindo à Batcaverna<br>'.
                        'Sua senha de acesso é <strong>'.$senha.'</strong>');

                $this->Flash->success('Uma mensagem com a senha foi enviada para o e-mail "'.$professor->email.'"');
                $this->redirect(['controller'=>'users', 'action'=>'login']);
            }else{
                $this->Flash->error('SIAPE "'.$dados['siape'].'" não encontrado!');
            }
        }
    }

    public function login()
    {
        $this->viewBuilder()->setLayout('login');
        if ($this->request->is('post')) {
            $user = $this->Auth->identify();
            if ($user) {
                if (true) {//$user['status'] == 'Ativo') {
                    $this->Auth->setUser($user);

                    return $this->redirect($this->Auth->redirectUrl());
                } else {
                    $this->Flash->error('Cadastro não ativo, solicique acesso!');
                }
            } else {
                $this->Flash->error(__('Erro no Login! Verifique usuário e/ou senha, ou solicite acesso à Diretoria.'));
            }
        }
    }

    public function logout()
    {
        return $this->redirect($this->Auth->logout());
    }//Fim do logout

    /**
     * View method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $user = $this->Auth->user();
        $user['professor'] = $this->getTableLocator()->get('Professores')->find()->where(['users_id'=>$user['id']])->first();

        $professor = $this->getTableLocator()->get('Professores')->find()->where(['users_id'=>$user['id']])->contain(['Users'])->first();

        $this->set(compact('user','professor'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $user = $this->Users->newEmptyEntity();
        if ($this->request->is('post')) {
            $user = $this->Users->patchEntity($user, $this->request->getData());
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'));
        }
        $this->set(compact('user'));
    }

    /**
     * Edit method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $user = $this->Auth->user();
        $user['professor'] = $this->getTableLocator()->get('Professores')->find()->where(['users_id'=>$user['id']])->first();


        $usuario = $this->Users->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $user = $this->Users->patchEntity($usuario, $this->request->getData());
            if ($this->Users->save($usuario)) {
                $this->Flash->success(__('The user has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'));
        }
        $this->set(compact('user','usuario'));
    }

    /**
     * Delete method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null|void Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $user = $this->Users->get($id);
        if ($this->Users->delete($user)) {
            $this->Flash->success(__('The user has been deleted.'));
        } else {
            $this->Flash->error(__('The user could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
